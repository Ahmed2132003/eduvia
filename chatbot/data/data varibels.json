{
    "varibels_data":[
        {
            "qustion":"What are variables in Python used for?",
            "answoer":"Variables in Python are used to store and manipulate data."
        },
        {
            "qustion":"How does Python make working with variables for beginners?",
            "answoer":" Python makes working with variables simple and intuitive, even for beginners."
        },
        {
            "qustion":"Why are variables fundamental to programming in Python?",
            "answoer":"Variables are fundamental because they are used to store and manipulate data."
        },
        {
            "qustion":"What will the text explore about variables in Python?",
            "answoer":"The text will explore how to define variables, the rules for naming them, their types, and best practices."
        },
        {
            "qustion":"Who can easily work with variables in Python?",
            "answoer":" Beginners can easily work with variables in Python."
        },
        {
            "qustion":"What is a variable in Python?",
            "answoer":"A variable in Python is a container for storing data values."
        },
        {
            "qustion":"Do you need to explicitly declare a variable's type in Python?",
            "answoer":"No, Python does not require you to explicitly declare a variable's type."
        },
        {
            "qustion":"When is a variable created in Python?",
            "answoer":"A variable is created at the moment you assign a value to it."
        },
        {
            "qustion":"How is Python different from some other programming languages regarding variables?",
            "answoer":"Unlike some programming languages, Python does not require explicit declaration of a variable's type."
        },
        {
            "qustion":"How can you assign a value to a variable in Python?",
            "answoer":"You can assign a value to a variable in Python using the assignment operator =. For example: \n x = 1 \n message = 'Hello, Python!'  "
        },
        {
            "qustion":"Can you assign multiple variables at once in Python?",
            "answoer":"Yes, you can assign multiple variables at once in Python. For example: \n a, b, c = 'red', 'green', 'blue'  "
        },
        {
            "qustion":"Does Python allow the use of single quotes and double quotes interchangeably for string values?",
            "answoer":"Yes, Python supports both single quotes (')and double quotes('' '') interchangeably for string values. For example:"
        },
        {
            "qustion":"What must a variable name in Python start with?",
            "answoer":"A variable name must start with a letter(a-z,A-Z) or an underscore(_)"
        },
        {
            "qustion":"Can a variable name in Python start with a number?",
            "answoer":"No, a variable name cannot start with a number."
        },
        {
            "qustion":" What characters can a variable name in Python contain?",
            "answoer":"A variable name in Python can only contain letters, numbers, and underscores."
        },
        {
            "qustion":"Is Python case-sensitive when it comes to variable names?",
            "answoer":"Yes, Python is case-sensitive. For example, name, Name, and NAME are three different variables."
        },
        {
            "qustion":"Can you use reserved keywords in Python as variable names?",
            "answoer":"No, reserved keywords in Python cannot be used as variable names. For example, you cannot use if, for, or class as variable names."
        },
        {
            "qustion":"What are some examples of Python’s reserved keywords?",
            "answoer":" Examples of reserved keywords in Python include: \n False, None, True, and, as, assert, break, class, continue, def, del, elif, else, except, finally, for, from, global, if, import, in, is, lambda, nonlocal, not, or, pass, raise, return, try, while, with, yield  "
        },
        {
            "qustion":"Why can’t reserved keywords be used as variable names in Python?",
            "answoer":"Reserved keywords are part of Python’s syntax and are used to define the structure and behavior of the language, so they cannot be used as variable names."
        },
        {
            "qustion":"What are the three common naming styles for variables in Python?",
            "answoer":" The three common naming styles are: \n 1.Camel Case: The first word is lowercase, and each subsequent word starts with an uppercase letter (e.g., studentName). \n Snake Case: Words are separated by underscores (e.g., student_name). \n Title Case: Each word starts with an uppercase letter, without spaces (e.g., StudentName).  "
        },
        {
            "qustion":"What is an example of a variable name in Camel Case?",
            "answoer":"An example of a variable name in Camel Case is studentName."
        },
        {
            "qustion":"How are words separated in Snake Case naming style?",
            "answoer":"In Snake Case, words are separated by underscores (e.g., student_name)."
        },
        {
            "qustion":"What does a variable's ID in Python represent?",
            "answoer":"A variable's ID in Python represents the memory location where the value is stored."
        },
        {
            "qustion":"Does a variable’s ID in Python change if its value changes?",
            "answoer":"Yes, when a variable’s value changes, its ID will also change."
        },
        {
            "qustion":"How can you check the ID of a variable in Python?",
            "answoer":"You can check the ID of a variable using the id() function. For example: \n x = 42  \n print(id(x))"
        },
        {
            "qustion":"Provide an example of how a variable’s ID changes when its value is updated.",
            "answoer":" Example: \n x=42 \n print(id(x)) \n x=100 \n print(id(x))"
        },
        {
            "qustion":"What are some of the built-in data types supported by Python?",
            "answoer":" Python supports the following built-in data types: \n 1.String (str): Text values, e.g., 'Hello'. \n 2.Integer (int): Whole numbers, e.g., 42. \n 3.Float (float): Decimal numbers, e.g., 3.14. \n 4.Boolean (bool): Logical values True or False. \n 5.NoneType (None): Represents no value or null."
        },
        {
            "qustion":"What is an example of a String data type in Python?",
            "answoer":" An example of a String data type is 'Hello'."
        },
        {
            "qustion":"Which data type represents whole numbers in Python?",
            "answoer":"The Integer (int) data type represents whole numbers in Python."
        },
        {
            "qustion":"What does the NoneType in Python represent?",
            "answoer":"The NoneType represents no value or null in Python."
        },
        {
            "qustion":"How can you check the data type of a variable in Python?",
            "answoer":"You can check the data type of a variable using the type() function. For \n example: \n x=42 \n print(type(x))"
        },
        {
            "qustion":" If x = 3.14, what will type(x) return?",
            "answoer":"If x = 3.14, type(x) will return <class 'float'>."
        },
        {
            "qustion":" How can you convert an integer to a string in Python?",
            "answoer":"You can convert an integer to a string using the str() function.  Example: \n x = str(5)  # x becomes '5'  "
        },
        {
            "qustion":"Provide an example of converting a string to an integer.",
            "answoer":"Example of converting a string to an integer : \n y = int('5')  # y becomes 5  "
        },
        {
            "qustion":"What function is used to convert a number to a floating-point value in Python?",
            "answoer":"The float() function is used to convert a number to a floating-point value.\n  Example: \n z = float(5)  # z becomes 5.0  "
        },
        {
            "qustion":"What is a global variable in Python?",
            "answoer":" A global variable in Python is a variable that is accessible throughout the entire program, including within functions."
        },
        {
            "qustion":"How can you declare a global variable inside a function?",
            "answoer":"You can declare a global variable inside a function by using the global keyword. Example: \n def my_function(): \n    global x \n     x = 'modified globally'"
        },
        {
            "qustion":"What is the output of the following code? ",
            "answoer":"x = 'global value' \n def my_function(): \n     global x \n x = 'modified globally' \n print(x) \n my_function() \n print(x)  \n The output of the code is: \n modified globally  \n modified globally  "
        },
        {
            "qustion":"Why is it generally recommended to minimize the use of global variables in Python?",
            "answoer":" It is recommended to minimize the use of global variables because they can make debugging and testing more challenging."
        },
        {
            "qustion":"If a variable is declared outside of any function, can it still be accessed inside functions without the global keyword? ",
            "answoer":"Yes, a variable declared outside of any function can be accessed inside functions without the global keyword, but it cannot be modified inside the function without explicitly using global."
        },
        {
            "qustion":"Does Python natively support constants?",
            "answoer":"No, Python does not natively support constants."
        },
        {
            "qustion":"How are constants represented in Python by convention?",
            "answoer":"Constants are represented by variables written in all uppercase letters, such as PI = 3.14159."
        },
        {
            "qustion":" Can Python enforce immutability for constants?",
            "answoer":"No, Python does not enforce immutability for constants. It is up to the developers to treat such variables as constants."
        },
        {
            "qustion":"What is the purpose of using uppercase letters for constants in Python?",
            "answoer":"Using uppercase letters indicates by convention that the variable should not be changed during program execution."
        },
        {
            "qustion":"Q5: Why should descriptive names be used for variables?",
            "answoer":"Descriptive names help clearly describe the purpose of the variable, making the code easier to understand (e.g., use student_name instead of x)."
        },
        {
            "qustion":"Why is it advised to avoid changing a variable’s data type?",
            "answoer":"Changing a variable’s data type can lead to confusion, so it is best to stick to one type for each variable."
        },
        {
            "qustion":"What is the recommended way to minimize the use of global variables?",
            "answoer":"It is recommended to prefer local variables within functions or classes to reduce dependencies and improve readability."
        },
        {
            "qustion":"Why should variable names not be reused?",
            "answoer":"Reusing variable names in different contexts can cause confusion and make the code harder to debug and maintain."
        },
        {
            "qustion":"Why is initializing variables important?",
            "answoer":"Initializing variables ensures they have a value before being used, preventing errors during program execution."
        },
        {
            "qustion":"ompare bad and good practices for declaring multiple variables, as given in the text.",
            "answoer":"Bad Practice: Declaring multiple variables in a single line, e.g., x, y, z = 10, 20, 30. \n Good Practice: Declaring each variable on a separate line with descriptive names, e.g.: \n age = 25  \n height = 180  "
        },
        {
            "qustion":"What is the purpose of choosing readable formats when declaring variables?",
            "answoer":"Readable formats make the code easier to understand and maintain."
        }
        
    ],
    "palteform_data":[
        {
            "qustion":"How do I log in to the platform?",
            "answoer":"To log in, press the 'Login' button and enter your username and password."
        },
        {
            "qustion":"What should I do if I don’t have an account?",
            "answoer":"If you don’t have an account, click on 'Create Account,' then provide your name, email, password, and choose whether you are a student or an instructor."
        },
        {
            "qustion":"What information is required to create an account?",
            "answoer":"You need to provide your name, email, password, and specify if you are a student or an instructor."
        },
        {
            "qustion":"What is available on the homepage?",
            "answoer":" The homepage provides details about all the other pages on the platform."
        },
        {
            "qustion":"What can I find on the courses page?",
            "answoer":"The courses page displays all the available courses on the platform."
        },
        {
            "qustion":"Can I skip videos in a course?",
            "answoer":"No, you must complete each video in sequence before accessing the next one."
        },
        {
            "qustion":" Can I leave feedback on courses?",
            "answoer":"Yes, you can leave ratings and comments on the courses."
        },
        {
            "qustion":"What is the purpose of the recommendations page?",
            "answoer":"The recommendations page provides key data insights, top courses, and top instructors using an AI-powered tool."
        },
        {
            "qustion":"How can I use the chatbot?",
            "answoer":"You can visit the chatbot page to get assistance from our highly trained chatbot."
        },
        {
            "qustion":"How can I contact the platform administration?",
            "answoer":" You can go to the 'Contact Us' page, which provides all the communication methods for assistance or contacting the administration."
        },
        {
            "qustion":" Where can I find information about the platform and company?",
            "answoer":"You can visit the 'About Us' page to view all the information about the platform and the company."
        }
    ],
    "installation_data": [
        {
            "qustion": "What is the first step to becoming a Python developer?",
            "answoer": "The first step is installing or updating Python on your computer."
        },
        {
            "qustion": "What are the different ways to install Python?",
            "answoer": "Python can be installed through the official website, a package manager, or a pre-installed system version."
        },
        {
            "qustion": "Which operating systems does the article cover for Python installation?",
            "answoer": "The article covers installation on Windows, macOS, Linux, mobile devices (iOS, Android), and web-based interpreters."
        },
        {
            "qustion": "Do most modern operating systems come with Python pre-installed?",
            "answoer": "Yes, most modern operating systems come with Python pre-installed as they rely on it."
        },
        {
            "qustion": "What are the two main ways to install Python on Windows?",
            "answoer": "Python can be installed via the Microsoft Store or the official Python website."
        },
        {
            "qustion": "Which Python installation method is recommended for Windows?",
            "answoer": "The full installation from the official Python website is recommended."
        },
        {
            "qustion": "How can you check if Python is already installed on Windows?",
            "answoer": "Open PowerShell and enter the command `python --version`."
        },
        {
            "qustion": "What should you do if PowerShell outputs 'Python 3.8.5'?",
            "answoer": "Python is already installed, and there is no need to reinstall it."
        },
        {
            "qustion": "Where can you download the Python installer?",
            "answoer": "The installer can be downloaded from [python.org](https://www.python.org)."
        },
        {
            "qustion": "Which architecture should be selected when downloading Python for Windows?",
            "answoer": "The 64-bit installer is recommended."
        },
        {
            "qustion": "What must be checked when running the Python installer on Windows?",
            "answoer": "Ensure that the 'Add Python to PATH' option is checked."
        },
        {
            "qustion": "What are the two main ways to install Python on macOS?",
            "answoer": "Python can be installed via Homebrew or from the official Python website."
        },
        {
            "qustion": "How can you check if Python is installed on macOS?",
            "answoer": "Open Terminal and run `python --version` or `python3 --version`."
        },
        {
            "qustion": "What should you do if macOS outputs 'Python 2.x'?",
            "answoer": "You should install the latest version of Python."
        },
        {
            "qustion": "What is the recommended installation method for Python on macOS?",
            "answoer": "Downloading and installing Python from the official website."
        },
        {
            "qustion": "Which macOS installer should be downloaded for Python?",
            "answoer": "The 'macOS 64-bit universal2 installer' should be selected."
        },
        {
            "qustion": "How can you check if Python is installed on Linux?",
            "answoer": "Open Terminal and run `python --version` or `python3 --version`."
        },
        {
            "qustion": "Which Linux distributions typically have Python pre-installed?",
            "answoer": "Most Linux distributions, including Ubuntu, Debian, and Arch, come with Python pre-installed."
        },
        {
            "qustion": "What command installs Python on Debian-based distributions like Ubuntu?",
            "answoer": "`sudo apt-get update` followed by `sudo apt-get install python3.8 python3-pip`."
        },
        {
            "qustion": "What command installs Python on Arch-based distributions?",
            "answoer": "`pacman -S python`."
        },
        {
            "qustion": "How can you install Python on an iPhone?",
            "answoer": "By downloading the 'Pythonista' app from the App Store."
        },
        {
            "qustion": "How can you install Python on an Android device?",
            "answoer": "By downloading the 'Pydroid 3' app from the Google Play Store."
        },
        {
            "qustion": "What are online Python interpreters used for?",
            "answoer": "They allow running Python code in a web browser for quick testing or learning."
        },
        {
            "qustion": "Which website provides an official Python online console?",
            "answoer": "[Python.org Online Console](https://www.python.org/shell/)."
        },
        {
            "qustion": "What is a popular online Python coding platform?",
            "answoer": "[Repl.it](https://replit.com/~)."
        },
        {
            "qustion": "Which online platform is useful for running Python code with graphics?",
            "answoer": "[Trinket](https://trinket.io/)."
        },
        {
            "qustion": "How do you ensure Python is correctly installed on Windows?",
            "answoer": "Run `python --version` in PowerShell to check the installed version."
        },
        {
            "qustion": "What should you do if 'python' is not recognized as a command in Windows?",
            "answoer": "Make sure Python is added to the system PATH during installation."
        },
        {
            "qustion": "How can you upgrade Python to the latest version?",
            "answoer": "Download and install the latest version from [python.org](https://www.python.org)."
        },
        {
            "qustion": "Why is installing Python important for developers?",
            "answoer": "It enables them to write, run, and develop Python applications efficiently."
        }
    ],
    "data_types_questions": [
        {
            "qustion": "What are the main data types supported in Python?",
            "answoer": "Python supports Strings, Integers, Floats, Complex Numbers, Tuples, Lists, Dictionaries, and Sets."
        },
        {
            "qustion": "How are strings indexed in Python?",
            "answoer": "Strings in Python are indexed starting from 0 for the first character."
        },
        {
            "qustion": "What is the output of `print('Hello World!'[8])`?",
            "answoer": "The output is 'r'."
        },
        {
            "qustion": "How do you extract a substring from a string in Python?",
            "answoer": "Using slicing. For example, `print(x[0:5])` extracts the first 5 characters."
        },
        {
            "qustion": "What will `print('Hello' * 2)` output?",
            "answoer": "It will output 'HelloHello'."
        },
        {
            "qustion": "What is a Python list?",
            "answoer": "A list is a collection that can hold multiple data types and is mutable."
        },
        {
            "qustion": "How do you access the first element of a list `x = ['abc', 100, 'xyz']`?",
            "answoer": "Using `x[0]`, which returns 'abc'."
        },
        {
            "qustion": "What will `print(x[1:3])` output if `x = ['abc', 'efg', 100, 'ilm']`?",
            "answoer": "It will output `['efg', 100]`."
        },
        {
            "qustion": "How do you concatenate two lists in Python?",
            "answoer": "Using the `+` operator, e.g., `list1 + list2`."
        },
        {
            "qustion": "How are tuples different from lists?",
            "answoer": "Tuples are immutable, meaning they cannot be changed after creation."
        },
        {
            "qustion": "How do you define a tuple in Python?",
            "answoer": "Using parentheses `()`, e.g., `x = ('abc', 'def', 100)`."
        },
        {
            "qustion": "What happens if you try to modify a tuple?",
            "answoer": "It raises a `TypeError` since tuples are immutable."
        },
        {
            "qustion": "How do you create a tuple with a single element?",
            "answoer": "By adding a comma, e.g., `x = ('hello',)`."
        },
        {
            "qustion": "What is a dictionary in Python?",
            "answoer": "A dictionary is a collection of key-value pairs defined using `{}`."
        },
        {
            "qustion": "How do you retrieve a value from a dictionary?",
            "answoer": "Using its key, e.g., `x['key']`."
        },
        {
            "qustion": "What happens if you access a non-existent key in a dictionary?",
            "answoer": "It raises a `KeyError`."
        },
        {
            "qustion": "How do you update a dictionary value?",
            "answoer": "By assigning a new value to an existing key, e.g., `x['key'] = 'newValue'`."
        },
        {
            "qustion": "What does `x.keys()` return in a dictionary?",
            "answoer": "It returns all dictionary keys as a list-like object."
        },
        {
            "qustion": "What does `x.values()` return in a dictionary?",
            "answoer": "It returns all dictionary values as a list-like object."
        },
        {
            "qustion": "What is a set in Python?",
            "answoer": "A set is an unordered collection of unique elements."
        },
        {
            "qustion": "How do you define a set in Python?",
            "answoer": "Using `{}` with comma-separated values, e.g., `x = {'apple', 'banana'}`."
        },
        {
            "qustion": "What happens if you add duplicate elements to a set?",
            "answoer": "Duplicates are automatically removed."
        },
        {
            "qustion": "How do you check if an element exists in a set?",
            "answoer": "Using the `in` keyword, e.g., `'apple' in x`."
        },
        {
            "qustion": "Can you modify a set after creation?",
            "answoer": "Yes, sets are mutable, and elements can be added or removed."
        },
        {
            "qustion": "How do you add an element to a set?",
            "answoer": "Using `set.add(element)`, e.g., `x.add('new_item')`."
        },
        {
            "qustion": "How do you remove an element from a set?",
            "answoer": "Using `set.remove(element)` or `set.discard(element)`."
        },
        {
            "qustion": "What is the difference between `remove()` and `discard()` in sets?",
            "answoer": "`remove()` raises an error if the element is missing, while `discard()` does not."
        },
        {
            "qustion": "How do you create an empty dictionary?",
            "answoer": "Using `{}` or `dict()`."
        },
        {
            "qustion": "How do you create an empty set?",
            "answoer": "Using `set()`, as `{}` creates an empty dictionary."
        },
        {
            "qustion": "How can you merge two sets?",
            "answoer": "Using `set1.union(set2)` or `set1 | set2`."
        },
        {
            "qustion": "How do you find common elements in two sets?",
            "answoer": "Using `set1.intersection(set2)` or `set1 & set2`."
        },
        {
            "qustion": "How do you get elements that are in one set but not the other?",
            "answoer": "Using `set1.difference(set2)` or `set1 - set2`."
        },
        {
            "qustion": "What will `print('Python'[0])` output?",
            "answoer": "It will output `P`."
        },
        {
            "qustion": "What will `print('Python'[-1])` output?",
            "answoer": "It will output `n`."
        },
        {
            "qustion": "How do you reverse a string in Python?",
            "answoer": "Using slicing, e.g., `'Python'[::-1]`."
        },
        {
            "qustion": "How do you check the length of a string?",
            "answoer": "Using `len(string)`."
        },
        {
            "qustion": "What will `print('Python'.upper())` output?",
            "answoer": "It will output `PYTHON`."
        },
        {
            "qustion": "What will `print('Python'.lower())` output?",
            "answoer": "It will output `python`."
        },
        {
            "qustion": "How do you replace a substring in a string?",
            "answoer": "Using `string.replace('old', 'new')`."
        },
        {
            "qustion": "What is the difference between `list.append(x)` and `list.extend([x])`?",
            "answoer": "`append()` adds an element, while `extend()` merges another list."
        },
        {
            "qustion": "How do you remove an item from a list by index?",
            "answoer": "Using `del list[index]` or `list.pop(index)`."
        },
        {
            "qustion": "How do you remove an item from a list by value?",
            "answoer": "Using `list.remove(value)`."
        },
        {
            "qustion": "What does `list.count(value)` do?",
            "answoer": "It returns the number of times a value appears in a list."
        },
        {
            "qustion": "How do you sort a list in ascending order?",
            "answoer": "Using `list.sort()`."
        },
        {
            "qustion": "How do you sort a list in descending order?",
            "answoer": "Using `list.sort(reverse=True)`."
        },
        {
            "qustion": "What does `list.reverse()` do?",
            "answoer": "It reverses the elements of the list in place."
        },
        {
            "qustion": "How can you access a specific character in a string in Python?",
            "answoer": "You can access a character in a string using its index. Indexing starts at 0. Example:\n```python\nx = 'Hello World!'\nprint(x[8])  # Output: 'r'\n```"
        },
        {
            "qustion": "How can you extract a substring in Python?",
            "answoer": "You can use slicing to extract a substring. Example:\n```python\nx = 'Hello World!'\nprint(x[0:5])  # Output: 'Hello'\n```"
        },
        {
            "qustion": "How do you print a string multiple times in Python?",
            "answoer": "You can use the multiplication operator `*` to repeat a string. Example:\n```python\nx = 'Hello World! '\nprint(x * 2)  # Output: 'Hello World! Hello World! '\n```"
        },
        {
            "qustion": "What is the main difference between a list and a tuple in Python?",
            "answoer": "The main difference is that lists are mutable (can be changed), while tuples are immutable (cannot be changed). Example:\n```python\nmy_list = [1, 2, 3]\nmy_list[0] = 10  # Allowed\n\nmy_tuple = (1, 2, 3)\nmy_tuple[0] = 10  # Error: TypeError: 'tuple' object does not support item assignment\n```"
        },
        {
            "qustion": "How can you add an element to a list in Python?",
            "answoer": "You can use the `append()` method to add an element to a list. Example:\n```python\nx = [1, 2, 3]\nx.append(4)\nprint(x)  # Output: [1, 2, 3, 4]\n```"
        },
        {
            "qustion": "How can you combine two lists in Python?",
            "answoer": "You can use the `+` operator to concatenate two lists. Example:\n```python\nx = [1, 2, 3]\ny = [4, 5, 6]\nprint(x + y)  # Output: [1, 2, 3, 4, 5, 6]\n```"
        },
        {
            "qustion": "How do you access dictionary values in Python?",
            "answoer": "You can access dictionary values using their keys. Example:\n```python\nx = {'name': 'Alice', 'age': 25}\nprint(x['name'])  # Output: 'Alice'\n```"
        },
        {
            "qustion": "How can you modify a dictionary value in Python?",
            "answoer": "You can update a dictionary value by assigning a new value to its key. Example:\n```python\nx = {'name': 'Alice', 'age': 25}\nx['age'] = 26\nprint(x)  # Output: {'name': 'Alice', 'age': 26}\n```"
        },
        {
            "qustion": "What is a set in Python, and how does it differ from a list?",
            "answoer": "A set is an unordered collection of unique elements, unlike lists that allow duplicate values. Example:\n```python\nx = {1, 2, 3, 3, 2}\nprint(x)  # Output: {1, 2, 3}  # Duplicates are removed\n```"
        },
        {
            "qustion": "How do you check if an element exists in a set?",
            "answoer": "You can use the `in` keyword to check for membership in a set. Example:\n```python\nx = {1, 2, 3}\nprint(2 in x)  # Output: True\nprint(5 in x)  # Output: False\n```"
        }
    ],
    "conditionals": [
        {
            "qustion": "What is a conditional statement in Python?",
            "answoer": "A conditional statement allows a program to execute different actions based on a condition. It typically involves `if`, `elif`, and `else` keywords.\n\nExample:\n```python\nx = 10\nif x > 5:\n    print('Greater than 5')\nelse:\n    print('5 or less')\n```"
        },
        {
            "qustion": "How does the ternary operator work in Python?",
            "answoer": "The ternary operator is a one-line shorthand for `if-else` statements.\n\nExample:\n```python\nx = 10\nresult = 'Positive' if x > 0 else 'Negative'\nprint(result)  # Output: 'Positive'\n```"
        },
        {
            "qustion": "Can you give an example of using `if`, `elif`, and `else` in Python?",
            "answoer": "Certainly! Here's an example:\n```python\nnum = 15\nif num > 20:\n    print('Greater than 20')\nelif num > 10:\n    print('Between 10 and 20')\nelse:\n    print('10 or less')\n```"
        },
        {
            "qustion": "What values are considered False in Python conditionals?",
            "answoer": "The following values evaluate to `False`:\n- `None`\n- `False`\n- `0` (including `0.0`, `0j`, etc.)\n- Empty sequences (`''`, `()`, `[]`)\n- Empty mappings (`{}`)\n- Custom objects with `__bool__` or `__len__` returning `False`."
        },
        {
            "qustion": "How can you use Boolean logic expressions in Python?",
            "answoer": "Boolean logic expressions use `and`, `or`, and `not` to evaluate conditions.\n\nExample:\n```python\nx, y = 5, 10\nif x > 0 and y > 0:\n    print('Both positive')\n```"
        },
        {
            "qustion": "What is lazy evaluation in Python conditionals?",
            "answoer": "Lazy evaluation means that Python stops evaluating expressions as soon as the result is determined.\n\nExample:\n```python\ndef func():\n    print('Function executed')\n    return True\n\nprint(False and func())  # Output: False (func() is not executed)\n```"
        },
        {
            "qustion": "How do you check multiple conditions correctly in Python?",
            "answoer": "Use logical operators properly:\n```python\nx, y = 5, 10\nif x > 2 and y > 2:\n    print('Both greater than 2')\n```"
        },
        {
            "qustion": "What is the difference between `if x == 3 or 4` and `if x in (3, 4)`?",
            "answoer": "`if x == 3 or 4` is incorrect because `4` is always `True`. Use `if x in (3, 4)` instead.\n\nExample:\n```python\nx = 1\nif x in (3, 4):\n    print('Match')\nelse:\n    print('No match')  # Output: 'No match'\n```"
        },
        {
            "qustion": "How do you test if a variable is `None`?",
            "answoer": "Use `is None` instead of `== None`:\n```python\nx = None\nif x is None:\n    print('x is None')\n```"
        },
        {
            "qustion": "What is the best way to assign a default value if a variable is `None`?",
            "answoer": "Use the `or` operator for short-circuit evaluation:\n```python\naDate = None\naDate = aDate or 'Default Value'\nprint(aDate)  # Output: 'Default Value'\n```"
        },
        {
            "qustion": "Can you provide an example of a nested ternary operator?",
            "answoer": "Certainly!\n```python\nn = 5\nresult = 'Hello' if n > 10 else 'Goodbye' if n > 5 else 'Good day'\nprint(result)  # Output: 'Good day'\n```"
        },
        {
            "qustion": "What happens if you use `else if` instead of `elif` in Python?",
            "answoer": "Python does not support `else if`. Using it will cause a syntax error. Use `elif` instead."
        },
        {
            "qustion": "How does Python evaluate `if a and b > 2`?",
            "answoer": "Python treats it as `if (a) and (b > 2)`, which can lead to incorrect results. Each condition must be explicitly stated:\n```python\nif a > 2 and b > 2:\n    print('Correct')\n```"
        },
        {
            "qustion": "Give an example of an `if` statement using a boolean expression.",
            "answoer": "Sure!\n```python\nx = 5\ny = 10\nif x and y:\n    print('Both x and y are truthy')\n```"
        },
        {
            "qustion": "What will `print(False or 'Python')` output?",
            "answoer": "It will output `'Python'` because `or` returns the first truthy value."
        },
        {
            "qustion": "How does `and` behave when multiple conditions are evaluated?",
            "answoer": "It returns the last value if all conditions are true, otherwise it returns the first false value.\n\nExample:\n```python\nprint(1 and 2 and 3)  # Output: 3\nprint(1 and 0 and 3)  # Output: 0\n```"
        },
        {
            "qustion": "What is the correct way to check if a variable is in a set of values?",
            "answoer": "Use `in`:\n```python\nx = 5\nif x in {3, 5, 7}:\n    print('x is in the set')\n```"
        },
        {
            "qustion": "How can you ensure an `else` block always runs?",
            "answoer": "By making sure all `if` and `elif` conditions fail:\n```python\nx = 10\nif x < 5:\n    print('Less than 5')\nelif x == 8:\n    print('Equal to 8')\nelse:\n    print('Default case')  # Always runs if others fail\n```"
        },
        {
            "qustion": "Can a Python `if` statement contain multiple expressions in a single line?",
            "answoer": "Yes, using semicolons:\n```python\nx = 5\nif x > 0: print('Positive'); print('End')\n```"
        },
        {
            "qustion": "What does `bool([])` return?",
            "answoer": "`False`, because empty sequences are considered falsey."
        },
        {
            "qustion": "What is the purpose of the `if` statement in Python?",
            "answoer": "The `if` statement is used to execute a block of code only if a specified condition evaluates to True.\n```python\nx = 10\nif x > 5:\n    print('x is greater than 5')\n```"
        },
        {
            "qustion": "How do you use `elif` in Python?",
            "answoer": "`elif` (short for 'else if') allows you to check multiple conditions in an if-else structure.\n```python\nx = 10\nif x < 5:\n    print('Less than 5')\nelif x == 10:\n    print('Equal to 10')\nelse:\n    print('Greater than 5')\n```"
        },
        {
            "qustion": "What does the `else` statement do in an `if-else` block?",
            "answoer": "The `else` statement runs a block of code if none of the previous conditions in the `if` or `elif` statements are met.\n```python\nx = 3\nif x > 5:\n    print('Greater than 5')\nelse:\n    print('Not greater than 5')\n```"
        },
        {
            "qustion": "How can you write an inline conditional expression (ternary operator) in Python?",
            "answoer": "You can use the ternary operator to write short conditional expressions in a single line.\n```python\nx = 5\nresult = 'Positive' if x > 0 else 'Non-positive'\nprint(result)  # Output: 'Positive'\n```"
        },
        {
            "qustion": "What is short-circuit evaluation in conditionals?",
            "answoer": "Short-circuit evaluation means that Python stops evaluating an expression as soon as the result is determined.\n```python\ndef test():\n    print('Function called!')\n    return True\n\nprint(False and test())  # Output: False (test() is not called)\n```"
        },
        {
            "qustion": "How does the `and` logical operator work in Python?",
            "answoer": "The `and` operator returns the first False value it encounters or the last value if all are True.\n```python\nprint(5 and 0 and 10)  # Output: 0\nprint(5 and 7 and 10)  # Output: 10\n```"
        },
        {
            "qustion": "How does the `or` logical operator work in Python?",
            "answoer": "The `or` operator returns the first True value it encounters or the last value if all are False.\n```python\nprint(0 or 5 or 10)  # Output: 5\nprint(0 or False or '')  # Output: ''\n```"
        },
        {
            "qustion": "What are truthy and falsy values in Python?",
            "answoer": "Truthy values evaluate to True, and falsy values evaluate to False in boolean contexts.\n```python\n# Falsy values:\nNone, False, 0, '', [], {}, set()\n\n# Truthy values:\n'Hello', 42, [1, 2, 3], {'key': 'value'}\n```"
        },
        {
            "qustion": "How can you check if a variable is `None`?",
            "answoer": "You should use `is None` instead of `== None` for checking if a variable is `None`.\n```python\nx = None\nif x is None:\n    print('x is None')\n```"
        },
        {
            "qustion": "What is the best way to check if a variable is one of multiple values?",
            "answoer": "Using the `in` operator is the most efficient way to check if a variable matches multiple values.\n```python\nx = 3\nif x in (1, 2, 3):\n    print('x is in the list')\n```"
        },
        {
            "qustion": "What happens if you use `else if` instead of `elif` in Python?",
            "answoer": "`else if` is not valid syntax in Python and will cause a syntax error."
        },
        {
            "qustion": "How can you use `if` statements inside a lambda function?",
            "answoer": "You can use a ternary operator inside a lambda function.\n```python\nfunc = lambda x: 'Positive' if x > 0 else 'Non-positive'\nprint(func(5))  # Output: 'Positive'\n```"
        },
        {
            "qustion": "What happens if an `if` statement is followed by `pass`?",
            "answoer": "`pass` does nothing and is used as a placeholder when a block is required syntactically but should remain empty.\n```python\nx = 5\nif x > 0:\n    pass  # No action taken\n```"
        },
        {
            "qustion": "How do nested if statements work?",
            "answoer": "You can place an `if` statement inside another `if` statement.\n```python\nx = 10\ny = 20\nif x > 5:\n    if y > 10:\n        print('Both conditions are True')\n```"
        },
        {
            "qustion": "What is the difference between `is` and `==`?",
            "answoer": "`==` checks for value equality, while `is` checks for object identity.\n```python\nx = [1, 2, 3]\ny = [1, 2, 3]\nprint(x == y)  # Output: True\nprint(x is y)  # Output: False\n```"
        },
        {
            "qustion": "Can you use `if` statements without indentation?",
            "answoer": "No, Python requires indentation for block structures, and omitting it will result in an IndentationError."
        },
        {
            "qustion": "What is the difference between `if x` and `if x is not None`?",
            "answoer": "`if x` checks if x is truthy, while `if x is not None` specifically checks for a None value."
        },
        {
            "qustion": "What is the difference between `elif` and multiple `if` statements?",
            "answoer": "Multiple `if` statements evaluate independently, while `elif` is only checked if previous conditions are False."
        },
        {
            "qustion": "How do you handle multiple conditions in a single `if` statement?",
            "answoer": "You can combine conditions using `and` and `or`.\n```python\nif x > 0 and y > 0:\n    print('Both are positive')\n```"
        },
        {
            "qustion": "How can you use conditionals inside a list comprehension?",
            "answoer": "You can use an `if` statement inside a list comprehension to filter elements.\n```python\nnumbers = [1, 2, 3, 4, 5]\neven_numbers = [x for x in numbers if x % 2 == 0]\nprint(even_numbers)  # Output: [2, 4]\n```"
        },{
            "qustion": "Can you use `elif` without an `if` statement?",
            "answoer": "No, `elif` must always follow an `if` statement. Otherwise, it will cause a syntax error."
        },
        {
            "qustion": "What happens if there are multiple `elif` statements and all conditions are `True`?",
            "answoer": "Only the first `elif` that evaluates to `True` will execute, and the rest will be ignored."
        },
        {
            "qustion": "Can you use `else` without an `if` statement?",
            "answoer": "No, `else` must be used after an `if` or `elif` statement; otherwise, it will cause an error."
        },
        {
            "qustion": "How can you check if a number is within a certain range using conditionals?",
            "answoer": "You can use the comparison operator with `and`.\n```python\nx = 10\nif 5 <= x <= 15:\n    print('x is in range')\n```"
        },
        {
            "qustion": "What is the difference between `or` and `xor` in Python?",
            "answoer": "`or` returns `True` if at least one condition is `True`, while `xor` (`^` in Python) returns `True` only if exactly one condition is `True`.\n```python\nprint(True or False)  # Output: True\nprint(True ^ False)  # Output: True\nprint(True ^ True)  # Output: False\n```"
        },
        {
            "qustion": "How can you use a dictionary to replace multiple `if-elif` statements?",
            "answoer": "You can use a dictionary mapping for cleaner code.\n```python\ndef get_day_name(day):\n    days = {1: 'Monday', 2: 'Tuesday', 3: 'Wednesday'}\n    return days.get(day, 'Invalid')\nprint(get_day_name(2))  # Output: 'Tuesday'\n```"
        },
        {
            "qustion": "How do you avoid deep nested `if` statements?",
            "answoer": "Use early returns in functions or break long conditions into separate checks.\n```python\ndef check_value(x):\n    if x < 0:\n        return 'Negative'\n    if x == 0:\n        return 'Zero'\n    return 'Positive'\n```"
        },
        {
            "qustion": "How can you check if a string contains only alphabetic characters using an `if` statement?",
            "answoer": "Use the `.isalpha()` method.\n```python\ntext = 'Hello'\nif text.isalpha():\n    print('Only letters!')\n```"
        },
        {
            "qustion": "How can you use `all()` and `any()` with conditionals?",
            "answoer": "`all()` checks if all elements are `True`, while `any()` checks if at least one element is `True`.\n```python\nnumbers = [1, 2, 3, 4]\nif all(n > 0 for n in numbers):\n    print('All positive')\nif any(n > 3 for n in numbers):\n    print('At least one greater than 3')\n```"
        },
        {
            "qustion": "What happens if an `if` condition is empty?",
            "answoer": "An empty `if` block causes an IndentationError. Use `pass` to avoid errors.\n```python\nx = 10\nif x > 5:\n    pass  # Placeholder for future code\n```"
        },
        {
            "qustion": "How can you compare two floating-point numbers safely?",
            "answoer": "Use `math.isclose()` to avoid precision issues.\n```python\nimport math\nif math.isclose(0.1 + 0.2, 0.3):\n    print('Equal')\n```"
        },
        {
            "qustion": "How do you check if a list is empty using an `if` statement?",
            "answoer": "Use `if not list_name` since an empty list evaluates to `False`.\n```python\nitems = []\nif not items:\n    print('List is empty')\n```"
        },
        {
            "qustion": "How do you check if two strings are anagrams using conditionals?",
            "answoer": "Sort both strings and compare them.\n```python\ndef is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2)\nprint(is_anagram('listen', 'silent'))  # Output: True\n```"
        },
        {
            "qustion": "How can you use conditionals to validate a password?",
            "answoer": "Check length and character types.\n```python\npassword = 'Pass123'\nif len(password) >= 6 and any(char.isdigit() for char in password):\n    print('Valid password')\n```"
        },
        {
            "qustion": "What happens if you use `if True:`?",
            "answoer": "The block always executes.\n```python\nif True:\n    print('This always runs')\n```"
        },
        {
            "qustion": "What happens if you use `if False:`?",
            "answoer": "The block is never executed.\n```python\nif False:\n    print('This never runs')\n```"
        },
        {
            "qustion": "How do you use conditionals to check if a year is a leap year?",
            "answoer": "Use modulo (`%`) to check divisibility.\n```python\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\nprint(is_leap_year(2024))  # Output: True\n```"
        },
        {
            "qustion": "How do you ensure that a variable contains only numbers?",
            "answoer": "Use `.isdigit()` for strings.\n```python\nnum = '12345'\nif num.isdigit():\n    print('Valid number')\n```"
        },
        {
            "qustion": "How can you check if an object is of a certain type?",
            "answoer": "Use `isinstance()`.\n```python\nx = 10\nif isinstance(x, int):\n    print('x is an integer')\n```"
        },
        {
            "qustion": "How can you conditionally execute code based on user input?",
            "answoer": "Use `input()` and an `if` statement.\n```python\nname = input('Enter your name: ')\nif name:\n    print(f'Hello, {name}')\n```"
        }
        
  ],
  
    "comparisons": [
        {
            "qustion": "What is a chain comparison in Python?",
            "answoer": "A chain comparison allows multiple comparisons in a single expression."
        },
        {
            "qustion": "Does the expression `0 != 1 != 0` evaluate to True or False?",
            "answoer": "It evaluates to True because `0 != 1` is True, and `1 != 0` is also True."
        },
        {
            "qustion": "What is the difference between `==` and `is` in Python?",
            "answoer": "`==` checks for value equality, while `is` checks for object identity."
        },
        {
            "qustion": "Can you provide an example of using `is` and `==`?",
            "answoer": "Sure!\n```python\na = [1, 2, 3]\nb = a[:]  # Creates a copy\nprint(a == b)  # True (same values)\nprint(a is b)  # False (different objects)\n```"
        },
        {
            "qustion": "Why does `a is b` return True for short strings but False for long strings?",
            "answoer": "Python optimizes memory usage by reusing small immutable objects like short strings and small integers."
        },
        {
            "qustion": "What is the recommended way to check if a variable is `None`?",
            "answoer": "Use `is` rather than `==`.\n```python\nif myvar is None:\n    print('Variable is None')\n```"
        },
        {
            "qustion": "Can you compare objects of different types using `==`?",
            "answoer": "Yes, but it often returns False unless explicit conversion is defined.\n```python\nprint(12 == '12')  # False\n```"
        },
        {
            "qustion": "How does Python handle comparisons of strings?",
            "answoer": "Strings are compared lexicographically (like dictionary order)."
        },
        {
            "qustion": "Is 'gamma' < 'OMEGA' True or False? Why?",
            "answoer": "False, because lowercase letters have higher ASCII values than uppercase ones."
        },
        {
            "qustion": "How does Python evaluate `1 > -1 < 2 > 0.5 < 100 != 24`?",
            "answoer": "It evaluates each comparison sequentially and returns True only if all are True."
        },
        {
            "qustion": "What happens when a chain comparison encounters False?",
            "answoer": "The evaluation stops immediately without checking further comparisons."
        },
        {
            "qustion": "Can you override comparison operators in custom classes?",
            "answoer": "Yes, by defining methods like `__eq__`, `__lt__`, etc." 
        },
        {
            "qustion": "Give an example of overriding `__eq__` in a custom class.",
            "answoer": "```python\nclass Foo:\n    def __init__(self, value):\n        self.value = value\n    def __eq__(self, other):\n        return self.value == other.value\n```"
        },
        {
            "qustion": "What is the default behavior of `is` for mutable objects?",
            "answoer": "Mutable objects like lists have unique identities unless explicitly assigned to the same reference."
        },
        {
            "qustion": "What happens if you compare objects of different types using `<` or `>`?",
            "answoer": "Python will raise a TypeError unless the types define a comparison method."
        },
        {
            "qustion": "Does `a > b > c` always mean `a > b and b > c`?",
            "answoer": "Yes, as long as all objects are comparable."
        },
        {
            "qustion": "What does `12 != '12'` return?",
            "answoer": "True, because they are different types."
        },
        {
            "qustion": "Is it good practice to use deeply nested chain comparisons?",
            "answoer": "No, it reduces code readability."
        },
        {
            "qustion": "Can Python compare tuples?",
            "answoer": "Yes, element-wise from left to right."
        },
        {
            "qustion": "What does `min(5, 10, -2)` return?",
            "answoer": "-2, as it finds the smallest value."
        },
        {
            "qustion": "What is the difference between `>=` and `>`?",
            "answoer": "`>=` allows equality, while `>` strictly requires greater value."
        },
        {
            "qustion": "Give an example of a custom comparison using `__lt__`.",
            "answoer": "```python\nclass Foo:\n    def __init__(self, value):\n        self.value = value\n    def __lt__(self, other):\n        return self.value < other.value\n```"
        },
        {
            "qustion": "Can objects be sorted using custom comparison methods?",
            "answoer": "Yes, by defining `__lt__` or using `key` in `sorted()`."
        },
        {
            "qustion": "Does `is` work on immutable types like tuples?",
            "answoer": "Yes, but only for identical references."
        },
        {
            "qustion": "Why is `1000 is 1000` False?",
            "answoer": "Large integers are stored separately in memory."
        },
        {
            "qustion": "What will `sorted(['apple', 'Banana', 'cherry'])` return?",
            "answoer": "['Banana', 'apple', 'cherry'], because uppercase comes before lowercase in ASCII order."
        },
        {
            "qustion": "How does Python handle `float` and `int` comparisons?",
            "answoer": "It converts `int` to `float` for the comparison."
        },
        {
            "qustion": "What does `a >= b` mean in Python?",
            "answoer": "It checks if `a` is greater than or equal to `b`."
        },
        {
            "qustion": "Can you use `==` with lists in Python?",
            "answoer": "Yes, it compares the elements of both lists to determine equality."
        },
        {
            "qustion": "How does Python compare sets using `==`?",
            "answoer": "It checks if both sets contain the same elements, regardless of order."
        },
        {
            "qustion": "What does `a < b <= c` check in Python?",
            "answoer": "It ensures `a` is less than `b`, and `b` is less than or equal to `c`."
        },
        {
            "qustion": "Does `None == None` return True?",
            "answoer": "Yes, because `None` is a singleton object."
        },
        {
            "qustion": "What happens when comparing a string and an integer using `>`?",
            "answoer": "Python raises a TypeError since different data types can't be ordered."
        },
        {
            "qustion": "Why does `1000 is 1000` return False sometimes?",
            "answoer": "Because large integers are not always stored in the same memory location."
        },
        {
            "qustion": "Can you use `is` to compare two different lists with the same values?",
            "answoer": "No, because `is` checks for object identity, not value equality."
        },
        {
            "qustion": "What is the difference between `is None` and `== None`?",
            "answoer": "`is None` checks identity, while `== None` checks value equivalence."
        },
        {
            "qustion": "Why does `float('nan') == float('nan')` return False?",
            "answoer": "Because NaN (Not a Number) is never equal to itself by definition."
        },
        {
            "qustion": "Can booleans be compared to integers in Python?",
            "answoer": "Yes, `True` acts as 1 and `False` acts as 0."
        },
        {
            "qustion": "How does Python compare objects of custom classes?",
            "answoer": "By default, it uses object identity unless comparison methods are overridden."
        },
        {
            "qustion": "Can you compare dictionary keys directly?",
            "answoer": "Yes, using `<`, `>`, or `==` if the keys are comparable."
        },
        {
            "qustion": "Does `sorted(['apple', 'Banana', 'cherry'])` return a case-sensitive sort?",
            "answoer": "Yes, uppercase letters come before lowercase in ASCII order."
        },
        {
            "qustion": "What happens when comparing two instances of a class without defining `__eq__`?",
            "answoer": "The default comparison checks object identity, not value equality."
        },
        {
            "qustion": "How does Python compare two tuples with different lengths?",
            "answoer": "It compares element by element until one tuple runs out of elements."
        },
        {
            "qustion": "Does Python allow chained comparisons with logical operators?",
            "answoer": "No, you must use parentheses to explicitly group logical conditions."
        },
        {
            "qustion": "What does `bool('False')` return?",
            "answoer": "True, because non-empty strings evaluate to True in boolean context."
        },
        {
            "qustion": "How can you compare two lists ignoring their order?",
            "answoer": "Convert them to sets and compare using `==`."
        },
        {
            "qustion": "What does `bool(None)` return?",
            "answoer": "False, because `None` is considered falsy."
        },
        {
            "qustion": "Can you use `is` to compare two separate integers in Python?",
            "answoer": "Only for small integers due to Python's internal caching."
        },
        {
            "qustion": "What does `bool(-1)` return?",
            "answoer": "True, because any non-zero integer is truthy in Python."
        },
        {
            "qustion": "How can you ensure floating-point comparisons are accurate?",
            "answoer": "Use `math.isclose()` instead of `==`."
        }
    ],
    "loops": [
        {
            "qustion": "What does the `range` function do in Python?",
            "answoer": "The `range` function generates a sequence of numbers, commonly used in loops."
        },
        {
            "qustion": "What is the output of `for x in range(1, 6): print(x)`?",
            "answoer": "It prints the numbers 1 to 5, each on a new line."
        },
        {
            "qustion": "How does Python 3 handle `range` differently than Python 2?",
            "answoer": "In Python 3, `range` returns a range object (iterator), while in Python 2, it returns a list."
        },
        {
            "qustion": "How can you loop through a list with both index and value?",
            "answoer": "Use the `enumerate` function."
        },
        {
            "qustion": "What does `enumerate(['one', 'two', 'three', 'four'])` return?",
            "answoer": "It generates index-value pairs: (0, 'one'), (1, 'two'), (2, 'three'), (3, 'four')."
        },
        {
            "qustion": "What is the purpose of `map` and `lambda` together?",
            "answoer": "They allow applying a function to every element of a list."
        },
            {
            "qustion": "How does Python 3 handle `map` differently than Python 2?",
            "answoer": "In Python 3, `map` returns an iterator, so it must be converted to a list."
        },
        {
            "qustion": "What is the output of `map(lambda e: e.upper(), ['one', 'two'])`?",
            "answoer": "['ONE', 'TWO'] in Python 2, but an iterator in Python 3."
        },
        {
            "qustion": "When does an `else` clause execute in a loop?",
            "answoer": "When the loop finishes normally, without a `break`."
        },
        {
            "qustion": "What is the output of a `for` loop with an `else` clause?",
            "answoer": "The `else` block executes if the loop runs to completion."
        },
        {
            "qustion": "What happens if a `break` statement is used in a loop with an `else` clause?",
            "answoer": "The `else` clause does not execute."
        },
        {
            "qustion": "What does the `pass` statement do?",
            "answoer": "It acts as a placeholder and does nothing when executed."
        },
        {
            "qustion": "Where can you use the `pass` statement?",
            "answoer": "In loops, function definitions, conditionals, and class definitions."
        },
        {
            "qustion": "How do you iterate over a dictionary's keys?",
            "answoer": "Use `for key in dict`."
        },
        {
            "qustion": "What does `dict.items()` return?",
            "answoer": "It returns key-value pairs of the dictionary."
        },
        {
            "qustion": "How do you iterate over both keys and values of a dictionary?",
            "answoer": "Use `for key, value in dict.items()`."
        },
        {
            "qustion": "How does `while True` behave?",
            "answoer": "It creates an infinite loop unless `break` is used."
        },
        {
            "qustion": "How do you implement a `do-while` loop in Python?",
            "answoer": "Use `while True` with a `break` inside."
        },
        {
            "qustion": "What is the difference between a `for` loop and a `while` loop?",
            "answoer": "A `for` loop iterates over a sequence, while a `while` loop runs as long as a condition is true."
        },
        {
            "qustion": "What does `enumerate` do in a loop?",
            "answoer": "It provides both the index and value of elements in a sequence."
        },
        {
            "qustion": "What is an infinite loop?",
            "answoer": "A loop that never terminates because its condition always remains true."
        },
        {
            "qustion": "How can you stop an infinite loop?",
            "answoer": "Using a `break` statement or interrupting execution manually."
        },
        {
            "qustion": "How do you iterate over every other element in a list?",
            "answoer": "Use slicing: `list[::2]`."
        },
        {
            "qustion": "What is the output of `for i in range(2,4): print(i)`?",
            "answoer": "It prints 2 and 3."
        },
        {
            "qustion": "How do you iterate over a sublist in Python?",
            "answoer": "Use list slicing or `range`."
        },
        {
            "qustion": "How does Python handle iteration over empty lists?",
            "answoer": "The loop body does not execute."
        },
        {
            "qustion": "What is the difference between `keys()` and `iterkeys()` in Python 2?",
            "answoer": "`keys()` returns a list, while `iterkeys()` returns an iterator."
        },
        {
            "qustion": "What does `while condition:` do in Python?",
            "answoer": "It runs the loop body as long as `condition` is True."
        },
        {
            "qustion": "What is a practical use case for `for...else`?",
            "answoer": "To check if an element was found in a search loop."
        },
        {
            "qustion": "What does `break` do in a loop?",
            "answoer": "It exits the loop immediately."
        },
        {
            "qustion": "What does `continue` do in a loop?",
            "answoer": "It skips the rest of the loop body and moves to the next iteration."
        },
        {
            "qustion": "How does `range(start, stop, step)` work?",
            "answoer": "It generates numbers from `start` to `stop-1` in increments of `step`."
        },
        {
            "qustion": "What happens if a `for` loop runs on an empty list?",
            "answoer": "The loop body does not execute."
        },
        {
            "qustion": "How do you iterate over a dictionary in sorted order?",
            "answoer": "Use `for key in sorted(dict)`."
        },
        {
            "qustion": "What is the difference between `while True` and `while 1`?",
            "answoer": "No difference; both create an infinite loop."
        },
        {
            "qustion": "Can a `for` loop iterate over a tuple?",
            "answoer": "Yes, tuples are iterable in Python."
        },
        {
            "qustion": "What is the purpose of `zip` in loops?",
            "answoer": "It allows iteration over multiple iterables in parallel."
        },
        {
            "qustion": "What does `reversed(range(5))` do?",
            "answoer": "It returns an iterator yielding numbers from 4 to 0."
        },
        {
            "qustion": "How can you loop through a string character by character?",
            "answoer": "Using `for char in string:`."
        },
        {
            "qustion": "What is a generator in Python loops?",
            "answoer": "A generator is an iterator that yields values lazily using `yield`."
        },
        {
            "qustion": "How do you avoid modifying a list while iterating over it?",
            "answoer": "Use `list.copy()` to iterate over a copy of the list."
        },
        {
            "qustion": "What happens if a `while` loop's condition never becomes `False`?",
            "answoer": "It creates an infinite loop."
        },
        {
            "qustion": "How do you iterate over a list in reverse order?",
            "answoer": "Use `for item in reversed(list)`."
        },
        {
            "qustion": "What is the difference between `break` and `return` in loops?",
            "answoer": "`break` exits the loop, `return` exits the function."
        },
        {
            "qustion": "Can you use `else` with a `while` loop?",
            "answoer": "Yes, it runs if the loop exits normally without `break`."
        },
        {
            "qustion": "What does `all(iterable)` do in a loop?",
            "answoer": "Returns `True` if all elements are truthy."
        },
        {
            "qustion": "What does `any(iterable)` do in a loop?",
            "answoer": "Returns `True` if any element is truthy."
        },
        {
            "qustion": "How do you find the index of an element while iterating over a list?",
            "answoer": "Use `enumerate()`."
        },
        {
            "qustion": "What is the difference between `is` and `==` in loops?",
            "answoer": "`is` checks identity, `==` checks value equality."
        },
        {
            "qustion": "How do you iterate over a set?",
            "answoer": "Use `for item in set:`."
        },
        {
            "qustion": "What does `while not condition:` do?",
            "answoer": "Runs the loop until the condition becomes `True`."
        },
        {
            "qustion": "How can you iterate over a file line by line?",
            "answoer": "Use `for line in open('file.txt'):`."
        },
        {
            "qustion": "What is the advantage of using a `for` loop over a `while` loop?",
            "answoer": "`for` loops automatically handle iteration and termination."
        },
        {
            "qustion": "Can you use `continue` in a `while` loop?",
            "answoer": "Yes, it skips to the next iteration."
        },
        {
            "qustion": "How do you iterate over dictionary values only?",
            "answoer": "Use `for value in dict.values()`."
        },
        {
            "qustion": "What does `itertools.cycle(iterable)` do?",
            "answoer": "It creates an infinite loop cycling through the iterable."
        },
        {
            "qustion": "How can you iterate through a nested list?",
            "answoer": "Use nested loops: `for sublist in list: for item in sublist:`."
        },
        {
            "qustion": "What is the difference between `range(5)` and `range(5, 0, -1)`?",
            "answoer": "The first counts up, the second counts down."
        },
        {
            "qustion": "How do you exit a nested loop?",
            "answoer": "Use `break` in the inner loop and track state in the outer loop."
        },
        {
            "qustion": "Can a `for` loop iterate over a generator?",
            "answoer": "Yes, generators are iterable."
        },
        {
            "qustion": "How do you iterate over a dictionary while modifying it?",
            "answoer": "Use `list(dict.items())` to avoid runtime errors."
        },
        {
            "qustion": "What is the use of `while True:`?",
            "answoer": "It creates an intentional infinite loop until a `break` occurs."
        },
        {
            "qustion": "What does `next(iterator)` do?",
            "answoer": "It retrieves the next item from an iterator."
        },
        {
            "qustion": "How do you implement a counter using a loop?",
            "answoer": "Use a variable and increment it within the loop."
        }
    ]


}